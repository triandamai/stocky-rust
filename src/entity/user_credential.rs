//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.3

use super::sea_orm_active_enums::AuthProvider;
use super::sea_orm_active_enums::UserStatus;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user_credential")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    #[sea_orm(unique)]
    pub email: String,
    pub full_name: String,
    pub password: String,
    pub status: UserStatus,
    pub auth_provider: AuthProvider,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub deleted: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::admin::Entity")]
    Admin,
    #[sea_orm(has_many = "super::admin_access::Entity")]
    AdminAccess,
    #[sea_orm(has_many = "super::device::Entity")]
    Device,
    #[sea_orm(has_many = "super::group::Entity")]
    Group,
    #[sea_orm(has_many = "super::group_member::Entity")]
    GroupMember,
    #[sea_orm(has_many = "super::notification::Entity")]
    Notification,
    #[sea_orm(has_many = "super::post::Entity")]
    Post,
    #[sea_orm(has_many = "super::post_comment::Entity")]
    PostComment,
    #[sea_orm(has_many = "super::post_mention::Entity")]
    PostMention,
    #[sea_orm(has_many = "super::user_login::Entity")]
    UserLogin,
    #[sea_orm(has_many = "super::user_notification::Entity")]
    UserNotification,
    #[sea_orm(has_many = "super::user_profile::Entity")]
    UserProfile,
    #[sea_orm(has_many = "super::user_push_token::Entity")]
    UserPushToken,
    #[sea_orm(has_many = "super::user_verification::Entity")]
    UserVerification,
}

impl Related<super::admin::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Admin.def()
    }
}

impl Related<super::admin_access::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AdminAccess.def()
    }
}

impl Related<super::device::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Device.def()
    }
}

impl Related<super::group::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Group.def()
    }
}

impl Related<super::group_member::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupMember.def()
    }
}

impl Related<super::notification::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Notification.def()
    }
}

impl Related<super::post::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Post.def()
    }
}

impl Related<super::post_comment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostComment.def()
    }
}

impl Related<super::post_mention::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostMention.def()
    }
}

impl Related<super::user_login::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserLogin.def()
    }
}

impl Related<super::user_notification::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserNotification.def()
    }
}

impl Related<super::user_profile::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserProfile.def()
    }
}

impl Related<super::user_push_token::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserPushToken.def()
    }
}

impl Related<super::user_verification::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserVerification.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
